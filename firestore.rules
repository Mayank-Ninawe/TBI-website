rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allows reading the specific admin credentials document
    match /admin_config/main_credentials {
      allow read: if true; // Allows any authenticated or unauthenticated client to read
      allow write: if request.auth != null; // Example: only allow authenticated users to write (you'd restrict this to admins)
    }
    
    // Rules for evaluationCriteria
    match /evaluationCriteria/{criterionId} {
      allow read: if true;  // Allow reading criteria for evaluation display
      allow write: if true; // For development - in production, restrict to admin
    }
    
    // Rules for contactSubmissions (User Onboarding & Application Data)
    match /contactSubmissions/{submissionId} {
      // Allow anyone to read all submissions (for admin dashboard)
      allow read: if request.auth != null; 
      
      // Allow anyone to create new submissions (for application forms)
      allow create: if true; 
      
      // Allow updates only for onboarding-related fields and admin processing
      allow update: if isValidOnboardingUpdate(resource, request) || isAdminUpdate(request);
    }

    // Rules for offCampusApplications
    match /offCampusApplications/{submissionId} {
      allow read: if request.auth != null;
      allow create: if true;
      // This update rule is intentionally permissive for development.
      // In production, this should be restricted to an admin role.
      allow update: if true;
    }
    
    // Helper functions for contactSubmissions rules
    function isValidOnboardingUpdate(existingData, incomingRequest) {
      let existingDoc = existingData.data;
      let incomingDoc = incomingRequest.resource.data;
      
      // Check if this is an accepted user updating their own onboarding data
      return existingDoc.status == 'accepted' &&
             // Only allow updates to onboarding-related fields
             incomingDoc.keys().hasAll(['name', 'email', 'status']) &&
             // Ensure core fields remain unchanged
             incomingDoc.email == existingDoc.email &&
             incomingDoc.status == existingDoc.status &&
             // Allow these onboarding fields to be added/updated
             isOnboardingFieldsOnly(incomingDoc) &&
             // Validate specific field requirements
             isValidOnboardingData(incomingDoc);
    }
    
    function isOnboardingFieldsOnly(incomingDoc) {
      // Define allowed onboarding fields that can be updated
      let allowedFields = [
        'name', 'email', 'status', 'temporaryUserId', 'temporaryPassword',
        'firstName', 'lastName', 'phone', 'bio', 'linkedin',
        'notificationPreferences', 'onboardingProgress', 'onboardingCompleted',
        'onboardingCompletedAt', 'passwordUpdatedAt', 'profileUpdatedAt',
        'submittedAt', 'campusStatus', 'companyName', 'idea'
      ];
      
      // Check that only allowed fields are being modified
      return incomingDoc.keys().hasOnly(allowedFields);
    }
    
    function isValidOnboardingData(incomingDoc) {
      // Validate password requirements
      let passwordValid = !incomingDoc.keys().hasAny(['temporaryPassword']) ||
                         (incomingDoc.temporaryPassword is string && 
                          incomingDoc.temporaryPassword.size() >= 6);
      
      // Validate profile requirements
      let profileValid = !incomingDoc.keys().hasAny(['firstName', 'lastName']) ||
                        (incomingDoc.firstName is string && 
                         incomingDoc.firstName.size() > 0 &&
                         incomingDoc.lastName is string && 
                         incomingDoc.lastName.size() > 0);
      
      // Validate LinkedIn URL format (if provided)
      let linkedinValid = !incomingDoc.keys().hasAny(['linkedin']) ||
                         incomingDoc.linkedin == '' ||
                         incomingDoc.linkedin.matches('https://.*linkedin.com/.*') ||
                         incomingDoc.linkedin.matches('https://.*linkedin.com/in/.*');
      
      // Validate notification preferences structure
      let notificationValid = !incomingDoc.keys().hasAny(['notificationPreferences']) ||
                             (incomingDoc.notificationPreferences.keys().hasAll(['emailNotifications']) &&
                              incomingDoc.notificationPreferences.emailNotifications is bool);
      
      return passwordValid && profileValid && linkedinValid && notificationValid;
    }
    
    function isAdminUpdate(incomingRequest) {
      // Allow admin operations for application processing
      // This covers accept/reject operations and credential assignment
      let isStatusUpdate = incomingRequest.resource.data.keys().hasAny([
        'status', 'processedByAdminAt'
      ]);
      
      let isCredentialAssignment = incomingRequest.resource.data.keys().hasAny([
        'temporaryUserId', 'temporaryPassword'
      ]) && incomingRequest.resource.data.status == 'accepted';
      
      return isStatusUpdate || isCredentialAssignment;
    }

    // Rules for events
    match /events/{eventId} {
      allow read: if true;    // Allows anyone to read events for the public page
      allow create: if true;  // WARNING: DEVELOPMENT ONLY - Allows anyone to create events.
                              // Secure this for production (e.g., if request.auth.token.isAdmin == true;)
      allow update: if true; // Placeholder: No one can update events yet
      allow delete: if true; // Placeholder: No one can delete events yet
    }
    
    // DEVELOPMENT-FRIENDLY MENTOR RULES
    match /mentors/{mentorId} {
      allow read: if true; // Allows anyone to read mentors for the public page
      // Allow writes for admin panel actions (development setting)
      allow write: if true;
      
      // Rules for mentor subcollections
      match /profile/{profileDoc} {
        allow read: if true;   // Allow reading mentor profile details
        allow write: if true;  // Allow writing mentor profile details
      }
      
      // Rules for potential future subcollections
      match /{subcollection=**} {
        allow read: if true;   // Allow reading all mentor subcollections
        allow write: if true;  // Allow writing all mentor subcollections
      }
    }
    
    // Rules for startups
    match /startups/{startupId} {
      allow read: if true; // Allows anyone to read startups for the public page
      allow create: if true; // WARNING: DEVELOPMENT ONLY. Allows anyone to create.
      allow update: if true; // WARNING: DEVELOPMENT ONLY. Allows anyone to update.
      allow delete: if true; // WARNING: DEVELOPMENT ONLY. Allows anyone to delete.
    }

    // PRODUCTION SECURITY RECOMMENDATIONS:
    // 1. Implement proper authentication checks
    // 2. Restrict mentorRequests write access to authenticated users only
    // 3. Limit emailTokens access to server-side operations only
    // 4. Add rate limiting for token generation
    
    // DEVELOPMENT RULES for mentor requests (More permissive for testing)
    match /mentorRequests/{requestId} {
      allow create: if true;
      allow read: if true;
      allow update: if true;
      allow delete: if true;
    }

    // DEVELOPMENT RULES for notifications (More permissive for testing)
    match /notifications/{notificationId} {
      allow create: if true;
      allow read: if true;
      allow update: if true;
      allow delete: if true;
    }

    // DEVELOPMENT-FRIENDLY USER RULES
    match /users/{userId} {
      allow read: if true;
      // Allow writes for admin panel actions creating mentor users (development setting)
      allow write: if true;
    }

    match /submissions/{submissionId} {
      allow read: if true;
      allow write: if true;
    }

    // DEVELOPMENT RULES for email tokens
    match /emailTokens/{tokenId} {
      allow read: if true;
      allow write: if true;
      allow delete: if true;
    }

    // Rules for evaluation_rounds collection
    match /evaluation_rounds/{docId} {
      allow read, write: if true; // Allow all access for admin panel functionality
    }

    // Rules for notifications collection (used by evaluation feature)
    match /notifications/{docId} {
      allow read, write: if true; // Allow all access for admin panel functionality
    }

    // Add other rules for other collections if needed
    match /analysisUploads/{docId} {
      allow read, write: if true;
    }

    match /analysis/{docId} {
      allow read, write: if true;
    }

    // Catch-all rule for testing: allow all reads and writes
    match /{document=**} {
      allow read, write: if true;
    }
  }
}
